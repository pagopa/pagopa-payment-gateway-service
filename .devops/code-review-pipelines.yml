trigger: none
pr:
  branches:
    include:
      - develop

pool:
  vmImage: ubuntu-latest

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

steps:
  - checkout: self
    clean: false

  - task: Cache@2
    inputs:
      key: 'maven | "$(Agent.OS)" | pom.xml'
      restoreKeys: |
        maven | "$(Agent.OS)"
        maven
      path: $(MAVEN_CACHE_FOLDER)
    displayName: Cache Maven local repo

#  - task: SonarCloudPrepare@1
#    displayName: 'Prepare SonarCloud analysis configuration'
#    inputs:
#      SonarCloud: '$(SONARCLOUD_SERVICE_CONN)'
#      organization: '$(SONARCLOUD_ORG)'
#      scannerMode: Other
#      extraProperties: |
#        sonar.projectKey=$(SONARCLOUD_PROJECT_KEY)
#        sonar.projectName=$(SONARCLOUD_PROJECT_NAME)
#        sonar.coverage.exclusions=**/config/*,**/*Mock*,**/model/*
#        sonar.coverage.jacoco.xmlReportPaths=./report/target/site/jacoco/jacoco.xml
#        sonar.junit.reportPaths=target/surefire-reports/

  - task: Bash@3
    displayName: Install Ojdbc
    inputs:
      targetType: 'inline'
      script: |
        mvn install:install-file -Dfile=./.db/oracle/ojdbc8-12.2.0.1.jar -DgroupId=com.oracle -DartifactId=ojdbc8 -Dversion=12.2.0.1 -Dpackaging=jar
      failOnStderr: true

  - task: Maven@3
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '11'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: false
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      goals: 'clean verify'
      sonarQubeRunAnalysis: false

#  - task: SonarCloudPublish@1
#    displayName: 'Publish SonarCloud results on build summary'
#    inputs:
#      pollingTimeoutSec: '300'

  - script: |
      docker-compose -f docker-compose-springboot-postgres.yaml up --build -d
    displayName: 'Run app with docker-compose'

  - script: |
      timeout 180 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8085/healthcheck)" != "200" ]]; do sleep 5; done' || exit 1
    displayName: 'Health check'

  - script: |
      [[ "$(docker ps --filter status=exited --format="{{.Image}} :: {{.Status}}" | grep liquibase | cut -d':' -f3 | sed -r "s/Exited \((.*)\) .*/\1/g" | tr -d ' ')" == "0" ]]
    displayName: 'Liquibase check'